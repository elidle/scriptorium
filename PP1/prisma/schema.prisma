// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "sqlite"
  url      = "file:/app/prisma/dev.db"
}

model User {
  id              Int             @id @default(autoincrement())
  firstname       String
  lastname        String
  username        String           @unique
  hashedPassword  String
  avatar          String?
  role            String           @default("user") // "user" or "admin"
  phoneNumber     String
  email           String           @unique
  about           String?
  posts           BlogPost[]       @relation("author")
  comments        Comment[]        @relation("author")
  postRatings     PostRating[]
  commentRatings  CommentRating[]
  codeTemplates   CodeTemplate[]
  reportPosts     PostReport[]
  reportComments  CommentReport[]
  hiddenPosts     BlogPost[]      @relation("moderator")
  hiddenComments  Comment[]       @relation("moderator")
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt 
}

model BlogPost {
  id              Int             @id @default(autoincrement())
  authorId        Int?
  author          User?            @relation("author", fields: [authorId], references: [id])
  title           String?
  content         String?
  isDeleted       Boolean          @default(false)
  deletedAt       DateTime?
  isHidden        Boolean          @default(false)
  hiddenAt        DateTime?
  hiddenById      Int?
  hiddenBy        User?            @relation("moderator", fields: [hiddenById], references: [id])
  tags            Tag[]
  codeTemplates   CodeTemplate[]
  comments        Comment[]
  ratings         PostRating[]
  reports         PostReport[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model Tag {
  id        Int                 @id @default(autoincrement())
  name      String               @unique
  posts     BlogPost[]
  templates CodeTemplate[]
}

model CodeTemplate {
  id           Int               @id @default(autoincrement())
  title        String
  code         String
  language     String
  explanation  String
  tags         Tag[]
  authorId     Int
  author       User              @relation(fields: [authorId], references: [id])
  isForked     Boolean           @default(false)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  posts        BlogPost[]
  parentForkId Int?
  parentFork   CodeTemplate?     @relation("childForks", fields: [parentForkId], references: [id])
  childForks   CodeTemplate[]    @relation("childForks")
}

model Comment {
  id            Int             @id @default(autoincrement())
  content       String?
  authorId      Int?
  author        User?            @relation("author", fields: [authorId], references: [id])
  postId        Int
  post          BlogPost         @relation(fields: [postId], references: [id])
  parent        Comment?         @relation("CommentReplies", fields: [parentId], references: [id])
  parentId      Int?
  replies       Comment[]        @relation("CommentReplies")
  ratings       CommentRating[]
  reports       CommentReport[]
  isDeleted     Boolean          @default(false)
  deletedAt     DateTime?
  isHidden      Boolean          @default(false)
  hiddenAt      DateTime?
  hiddenById    Int?
  hiddenBy      User?            @relation("moderator", fields: [hiddenById], references: [id])
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
}

model PostRating {
  id          Int        @id @default(autoincrement())
  value       Int         // -1 for downvote, +1 for upvote
  user        User        @relation(fields: [userId], references: [id])
  userId      Int
  post        BlogPost    @relation(fields: [postId], references: [id])
  postId      Int
}

model CommentRating {
  id          Int        @id @default(autoincrement())
  value       Int         // -1 for downvote, +1 for upvote
  user        User        @relation(fields: [userId], references: [id])
  userId      Int
  comment     Comment     @relation(fields: [commentId], references: [id])
  commentId   Int
}

model CommentReport {
  id         Int      @id @default(autoincrement())
  commentId  Int
  comment    Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  reporterId Int
  reporter   User     @relation(fields: [reporterId], references: [id])
  reason     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model PostReport {
  id         Int      @id @default(autoincrement())
  postId     Int
  post       BlogPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  reporterId Int
  reporter   User     @relation(fields: [reporterId], references: [id])
  reason     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
