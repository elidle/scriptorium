// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id              Int             @id @default(autoincrement())
  username        String           @unique
  posts           BlogPost[]
  comments        Comment[]
  postRatings     PostRating[]
  commentRatings  CommentRating[]
}

model BlogPost {
  id              Int            @id @default(autoincrement())
  authorId        Int?
  author          User?            @relation(fields: [authorId], references: [id])
  title           String?
  content         String?
  isDeleted       Boolean          @default(false)
  deletedAt       DateTime?
  tags            Tag[]
  codeTemplates   CodeTemplate[]
  comments        Comment[]
  ratings         PostRating[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model Tag {
  id         Int               @id @default(autoincrement())
  name       String             @unique
  posts      BlogPost[]
}

model CodeTemplate {
  id         Int              @id @default(autoincrement())
  blogPosts  BlogPost[]
}

model Comment {
  id          Int              @id @default(autoincrement())
  content     String?
  authorId    Int?
  author      User?             @relation(fields: [authorId], references: [id])
  post        BlogPost          @relation(fields: [postId], references: [id])
  postId      Int
  parent      Comment?          @relation("CommentReplies", fields: [parentId], references: [id])
  parentId    Int?
  replies     Comment[]         @relation("CommentReplies")
  ratings     CommentRating[]
  isDeleted   Boolean           @default(false)
  deletedAt   DateTime?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model PostRating {
  id          Int        @id @default(autoincrement())
  value       Int         // -1 for downvote, +1 for upvote
  user        User        @relation(fields: [userId], references: [id])
  userId      Int
  post        BlogPost    @relation(fields: [postId], references: [id])
  postId      Int
}

model CommentRating {
  id          Int        @id @default(autoincrement())
  value       Int         // -1 for downvote, +1 for upvote
  user        User        @relation(fields: [userId], references: [id])
  userId      Int
  comment     Comment     @relation(fields: [commentId], references: [id])
  commentId   Int
}
