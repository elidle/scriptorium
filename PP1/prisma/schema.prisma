// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id             Int         @id @default(autoincrement())
  firstname      String
  lastname       String
  username       String       @unique
  email          String       @unique
  posts          BlogPost[]
  comments       Comment[]
  ratings        Rating[]
  codeTemplates  CodeTemplate[]
  hashedPassword String
  avatar         String?
  role           String   @default("user")  // either "user" or "admin"
  phoneNumber    String   @default("0")
}

model BlogPost {
  id          Int            @id @default(autoincrement())
  authorId    Int
  author      User            @relation(fields: [authorId], references: [id])
  title       String
  content     String
  tags        TagsOnPosts[]   @relation("PostToTags")
  codeLinks   CodeTemplate[]
  comments    Comment[]
  ratings     Rating[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model Tag {
  id     Int                  @id @default(autoincrement())
  name   String                @unique
  posts  TagsOnPosts[]         @relation("TagToPosts")
  templates  TagsOnTemplate[]  @relation("TagToTemplates")
}

model TagsOnPosts {
  post       BlogPost  @relation("PostToTags", fields: [postId], references: [id], onDelete: Cascade)
  postId     Int
  tag        Tag       @relation("TagToPosts", fields: [tagId], references: [id], onDelete: Cascade)
  tagId      Int
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@id([postId, tagId])
}

model CodeTemplate {
  id         Int              @id @default(autoincrement())
  authorId   Int
  author     User              @relation(fields: [authorId], references: [id])
  title      String
  content    String
  tags       TagsOnTemplate[] @relation("TemplateToTags")
  blogPosts  BlogPost[]
}

model TagsOnTemplate {
  codeTemplate      CodeTemplate  @relation("TemplateToTags", fields: [templateId], references: [id], onDelete: Cascade)
  templateId        Int
  tag               Tag            @relation("TagToTemplates", fields: [tagId], references: [id], onDelete: Cascade)
  tagId             Int
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  @@id([templateId, tagId])
}

model Comment {
  id          Int         @id @default(autoincrement())
  content     String
  authorId    Int
  author      User         @relation(fields: [authorId], references: [id])
  post        BlogPost     @relation(fields: [postId], references: [id])
  postId      Int
  parent      Comment?     @relation("CommentReplies", fields: [parentId], references: [id])
  parentId    Int?
  replies     Comment[]    @relation("CommentReplies")
  ratings     Rating[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Rating {
  id          Int         @id @default(autoincrement())
  value       Int          // -1 for downvote, +1 for upvote
  user        User         @relation(fields: [userId], references: [id])
  userId      Int
  post        BlogPost?    @relation(fields: [postId], references: [id])
  postId      Int?
  comment     Comment?     @relation(fields: [commentId], references: [id])
  commentId   Int?
}


